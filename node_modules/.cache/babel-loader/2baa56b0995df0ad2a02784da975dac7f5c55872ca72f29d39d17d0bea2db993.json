{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\QR code\\\\qr\\\\src\\\\components\\\\Qr_g.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './qr_g.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRCodeGenerator = () => {\n  _s();\n  const [content, setContent] = useState(''); // State for text content\n  const [qrCode, setQRCode] = useState(''); // State to store QR code image source\n  const [error, setError] = useState(''); // State to handle errors\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5000/generate_qr', {\n        url: content\n      }, {\n        responseType: 'blob' // Ensure response is treated as a blob\n      });\n      const qrCodeBase64 = await convertBlobToBase64(response.data);\n      const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\n      setQRCode(qrCodeSrc);\n      setError('');\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      setError('Failed to generate QR code. Please try again.');\n      setQRCode('');\n    }\n  };\n  const convertBlobToBase64 = blob => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onerror = reject;\n      reader.onload = () => {\n        resolve(reader.result.split(',')[1]);\n      };\n      reader.readAsDataURL(blob);\n    });\n  };\n  const handleContentChange = event => {\n    const {\n      value\n    } = event.target;\n    setContent(value);\n    setQRCode('');\n    setError('');\n  };\n  const handleCopyQRCode = () => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    const image = new Image();\n    image.src = qrCode;\n    image.onload = () => {\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      canvas.toBlob(blob => {\n        navigator.clipboard.write([new ClipboardItem({\n          [blob.type]: blob\n        })]).then(() => {\n          alert('QR code image copied to clipboard!');\n        }).catch(error => {\n          console.error('Failed to copy QR code image:', error);\n          alert('Failed to copy QR code image. Please try again.');\n        });\n      });\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qrcode-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"QR Code Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"qrcode-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter Text to Generate QR Code:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: content,\n          onChange: handleContentChange,\n          required: true,\n          placeholder: \"Enter text here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), qrCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"qrcode-generated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated QR Code:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: qrCode,\n        alt: \"Generated QR Code\",\n        className: \"qr-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"share-button\",\n        onClick: handleCopyQRCode,\n        children: \"Share the QR code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(QRCodeGenerator, \"DlOleAWVkdYwGa/VEqF2lH7wens=\");\n_c = QRCodeGenerator;\nexport default QRCodeGenerator;\nvar _c;\n$RefreshReg$(_c, \"QRCodeGenerator\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","QRCodeGenerator","_s","content","setContent","qrCode","setQRCode","error","setError","handleSubmit","event","preventDefault","response","post","url","responseType","qrCodeBase64","convertBlobToBase64","data","qrCodeSrc","console","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","split","readAsDataURL","handleContentChange","value","target","handleCopyQRCode","canvas","document","createElement","context","getContext","image","Image","src","width","height","drawImage","toBlob","navigator","clipboard","write","ClipboardItem","type","then","alert","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","required","placeholder","alt","onClick","_c","$RefreshReg$"],"sources":["D:/Personal Projects/QR code/qr/src/components/Qr_g.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './qr_g.css';\r\n\r\nconst QRCodeGenerator = () => {\r\n  const [content, setContent] = useState(''); // State for text content\r\n  const [qrCode, setQRCode] = useState('');   // State to store QR code image source\r\n  const [error, setError] = useState('');     // State to handle errors\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/generate_qr', { url: content }, {\r\n        responseType: 'blob', // Ensure response is treated as a blob\r\n      });\r\n\r\n      const qrCodeBase64 = await convertBlobToBase64(response.data);\r\n      const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\r\n\r\n      setQRCode(qrCodeSrc);\r\n      setError('');\r\n    } catch (error) {\r\n      console.error('Error generating QR code:', error);\r\n      setError('Failed to generate QR code. Please try again.');\r\n      setQRCode('');\r\n    }\r\n  };\r\n\r\n  const convertBlobToBase64 = (blob) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onerror = reject;\r\n      reader.onload = () => {\r\n        resolve(reader.result.split(',')[1]);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  };\r\n\r\n  const handleContentChange = (event) => {\r\n    const { value } = event.target;\r\n    setContent(value);\r\n    setQRCode('');\r\n    setError('');\r\n  };\r\n\r\n  const handleCopyQRCode = () => {\r\n    const canvas = document.createElement('canvas');\r\n    const context = canvas.getContext('2d');\r\n    const image = new Image();\r\n    image.src = qrCode;\r\n    image.onload = () => {\r\n      canvas.width = image.width;\r\n      canvas.height = image.height;\r\n      context.drawImage(image, 0, 0);\r\n\r\n      canvas.toBlob((blob) => {\r\n        navigator.clipboard.write([\r\n          new ClipboardItem({\r\n            [blob.type]: blob\r\n          })\r\n        ]).then(() => {\r\n          alert('QR code image copied to clipboard!');\r\n        }).catch((error) => {\r\n          console.error('Failed to copy QR code image:', error);\r\n          alert('Failed to copy QR code image. Please try again.');\r\n        });\r\n      });\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"qrcode-container\">\r\n      <h2>QR Code Generator</h2>\r\n      <form className=\"qrcode-form\" onSubmit={handleSubmit}>\r\n        <label>\r\n          Enter Text to Generate QR Code:\r\n          <input\r\n            type=\"text\"\r\n            value={content}\r\n            onChange={handleContentChange}\r\n            required\r\n            placeholder=\"Enter text here\"\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Generate QR Code</button>\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </form>\r\n      {qrCode && (\r\n        <div className=\"qrcode-generated\">\r\n          <h3>Generated QR Code:</h3>\r\n          <img src={qrCode} alt=\"Generated QR Code\" className=\"qr-image\" />\r\n          <button className=\"share-button\" onClick={handleCopyQRCode}>Share the QR code</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRCodeGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}