{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\QR code\\\\qr\\\\src\\\\components\\\\Qr_g.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './qr_g.css';\n\n// const QRCodeGenerator = () => {\n//   const [url, setUrl] = useState('');\n//   const [qrCode, setQRCode] = useState('');\n//   const [error, setError] = useState('');\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     if (!url.trim()) {\n//       setError('Please enter a valid URL.');\n//       return;\n//     }\n\n//     try {\n//       // Send POST request to Flask backend\n//       const response = await axios.post('http://localhost:5000/generate_qr', { url }, {\n//         responseType: 'arraybuffer',  // Ensure response is treated as binary data\n//       });\n\n//       // Convert binary data to base64 string\n//       const qrCodeBase64 = Buffer.from(response.data, 'binary').toString('base64');\n//       const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\n\n//       // Display the QR code image\n//       setQRCode(qrCodeSrc);\n//       setError('');\n//     } catch (error) {\n//       console.error('Error generating QR code:', error);\n//       setError('Failed to generate QR code. Please try again.');\n//     }\n//   };\n\n//   return (\n//     <div className=\"qrcode-container\">\n//       <h2>QR Code Generator</h2>\n//       <form className=\"qrcode-form\" onSubmit={handleSubmit}>\n//         <label>\n//           Enter URL:\n//           <input\n//             type=\"text\"\n//             value={url}\n//             onChange={(e) => setUrl(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\">Generate QR Code</button>\n//         {error && <p className=\"error-message\">{error}</p>}\n//       </form>\n//       {qrCode && (\n//         <div className=\"qrcode-generated\">\n//           <h3>Generated QR Code:</h3>\n//           <img src={qrCode} alt=\"Generated QR Code\" />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default QRCodeGenerator;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport \"./qr_g.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRCodeGenerator = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [qrCode, setQRCode] = useState('');\n  const [error, setError] = useState('');\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      // Send POST request to Flask backend\n      const response = await axios.post('http://localhost:5000/generate_qr', {\n        url\n      }, {\n        responseType: 'arraybuffer' // Ensure response is treated as binary data\n      });\n\n      // Convert binary data to base64 string\n      const qrCodeBase64 = Buffer.from(response.data, 'binary').toString('base64');\n      const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\n\n      // Display the QR code image\n      setQRCode(qrCodeSrc);\n      setError('');\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      setError('Failed to generate QR code. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qrcode-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"QR Code Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"qrcode-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: e => setUrl(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), qrCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"qrcode-generated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated QR Code:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: qrCode,\n        alt: \"Generated QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(QRCodeGenerator, \"dDP1oZ2l7dbXyZ6q7U8t/cTZUXw=\");\n_c = QRCodeGenerator;\nexport default QRCodeGenerator;\nvar _c;\n$RefreshReg$(_c, \"QRCodeGenerator\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","QRCodeGenerator","_s","url","setUrl","qrCode","setQRCode","error","setError","handleSubmit","event","preventDefault","response","post","responseType","qrCodeBase64","Buffer","from","data","toString","qrCodeSrc","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","required","src","alt","_c","$RefreshReg$"],"sources":["D:/Personal Projects/QR code/qr/src/components/Qr_g.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './qr_g.css';\r\n\r\n// const QRCodeGenerator = () => {\r\n//   const [url, setUrl] = useState('');\r\n//   const [qrCode, setQRCode] = useState('');\r\n//   const [error, setError] = useState('');\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     if (!url.trim()) {\r\n//       setError('Please enter a valid URL.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       // Send POST request to Flask backend\r\n//       const response = await axios.post('http://localhost:5000/generate_qr', { url }, {\r\n//         responseType: 'arraybuffer',  // Ensure response is treated as binary data\r\n//       });\r\n\r\n//       // Convert binary data to base64 string\r\n//       const qrCodeBase64 = Buffer.from(response.data, 'binary').toString('base64');\r\n//       const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\r\n\r\n//       // Display the QR code image\r\n//       setQRCode(qrCodeSrc);\r\n//       setError('');\r\n//     } catch (error) {\r\n//       console.error('Error generating QR code:', error);\r\n//       setError('Failed to generate QR code. Please try again.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"qrcode-container\">\r\n//       <h2>QR Code Generator</h2>\r\n//       <form className=\"qrcode-form\" onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Enter URL:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={url}\r\n//             onChange={(e) => setUrl(e.target.value)}\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\">Generate QR Code</button>\r\n//         {error && <p className=\"error-message\">{error}</p>}\r\n//       </form>\r\n//       {qrCode && (\r\n//         <div className=\"qrcode-generated\">\r\n//           <h3>Generated QR Code:</h3>\r\n//           <img src={qrCode} alt=\"Generated QR Code\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default QRCodeGenerator;\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport \"./qr_g.css\";\r\n\r\nconst QRCodeGenerator = () => {\r\n  const [url, setUrl] = useState('');\r\n  const [qrCode, setQRCode] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      // Send POST request to Flask backend\r\n      const response = await axios.post('http://localhost:5000/generate_qr', { url }, {\r\n        responseType: 'arraybuffer',  // Ensure response is treated as binary data\r\n      });\r\n\r\n      // Convert binary data to base64 string\r\n      const qrCodeBase64 = Buffer.from(response.data, 'binary').toString('base64');\r\n      const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\r\n\r\n      // Display the QR code image\r\n      setQRCode(qrCodeSrc);\r\n      setError('');\r\n    } catch (error) {\r\n      console.error('Error generating QR code:', error);\r\n      setError('Failed to generate QR code. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"qrcode-container\">\r\n      <h2>QR Code Generator</h2>\r\n      <form className=\"qrcode-form\" onSubmit={handleSubmit}>\r\n        <label>\r\n          Enter URL:\r\n          <input\r\n            type=\"text\"\r\n            value={url}\r\n            onChange={(e) => setUrl(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Generate QR Code</button>\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </form>\r\n      {qrCode && (\r\n        <div className=\"qrcode-generated\">\r\n          <h3>Generated QR Code:</h3>\r\n          <img src={qrCode} alt=\"Generated QR Code\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRCodeGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}