{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\QR code\\\\qr\\\\src\\\\components\\\\Qr_g.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './qr_g.css';\n\n// const QRCodeGenerator = () => {\n//   const [content, setContent] = useState(null); // Use null for file content\n//   const [qrCode, setQRCode] = useState('');\n//   const [error, setError] = useState('');\n//   const [contentType, setContentType] = useState('text'); // Default content type\n\n//   const handleContentTypeChange = (event) => {\n//     setContentType(event.target.value);\n//     setContent(null); // Clear content when content type changes\n//     setQRCode(''); // Clear QR code when content type changes\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       let formData = new FormData();\n//       formData.append('type', contentType);\n\n//       if (contentType === 'text') {\n//         formData.append('content', content);\n//       } else if (contentType === 'image' || contentType === 'file') {\n//         formData.append('content', content);\n//       }\n\n//       // Send POST request to Flask backend\n//       const response = await axios.post('http://localhost:5000/generate_qr', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data'\n//         },\n//         responseType: 'blob', // Ensure response is treated as a blob\n//       });\n\n//       // Convert blob to base64 string\n//       const qrCodeBase64 = await convertBlobToBase64(response.data);\n//       const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\n\n//       // Display the QR code image\n//       setQRCode(qrCodeSrc);\n//       setError('');\n//     } catch (error) {\n//       console.error('Error generating QR code:', error);\n//       setError('Failed to generate QR code. Please try again.');\n//       setQRCode(''); // Clear QR code on error\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     setContent(event.target.files[0]); // Update content with selected file\n//   };\n\n//   const convertBlobToBase64 = (blob) => {\n//     return new Promise((resolve, reject) => {\n//       const reader = new FileReader();\n//       reader.onerror = reject;\n//       reader.onload = () => {\n//         resolve(reader.result.split(',')[1]);\n//       };\n//       reader.readAsDataURL(blob);\n//     });\n//   };\n\n//   return (\n//     <div className=\"qrcode-container\">\n//       <h2>QR Code Generator</h2>\n//       <form className=\"qrcode-form\" onSubmit={handleSubmit}>\n//         <label>\n//           Select content type:\n//           <select value={contentType} onChange={handleContentTypeChange}>\n//             <option value=\"text\">Text</option>\n//             <option value=\"image\">Image URL</option>\n//             <option value=\"file\">Upload File</option>\n//           </select>\n//         </label>\n//         {contentType !== 'file' && (\n//           <label>\n//             Enter {contentType === 'text' ? 'Text' : 'URL'}:\n//             <input\n//               type=\"text\"\n//               value={content || ''}\n//               onChange={(e) => setContent(e.target.value)}\n//               required={contentType !== 'image'}\n//               placeholder={`Enter ${contentType === 'text' ? 'text' : 'URL'}`}\n//             />\n//           </label>\n//         )}\n//         {contentType === 'file' && (\n//           <label>\n//             Upload File:\n//             <input\n//               type=\"file\"\n//               onChange={handleFileChange}\n//               accept=\".jpg,.jpeg,.png,.gif,.txt,.pdf,.doc,.docx\"\n//               required\n//             />\n//           </label>\n//         )}\n//         <button type=\"submit\">Generate QR Code</button>\n//         {error && <p className=\"error-message\">{error}</p>}\n//       </form>\n//       {qrCode && (\n//         <div className=\"qrcode-generated\">\n//           <h3>Generated QR Code:</h3>\n//           <img src={qrCode} alt=\"Generated QR Code\" className=\"qr-image\" />\n//           <button className=\"share-button\" onClick={() => navigator.clipboard.writeText(qrCode)}>Share the QR code</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default QRCodeGenerator;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './qr_g.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRCodeGenerator = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [qrCode, setQRCode] = useState('');\n  const [error, setError] = useState('');\n  const [timer, setTimer] = useState(180); // 3 minutes in seconds\n\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      if (!file) {\n        setError('Please select a file to upload.');\n        return;\n      }\n      let formData = new FormData();\n      formData.append('file', file);\n\n      // Send POST request to Flask backend\n      const response = await axios.post('http://localhost:5000/generate_qr', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        responseType: 'blob' // Ensure response is treated as a blob\n      });\n\n      // Convert blob to base64 string\n      const qrCodeBase64 = await convertBlobToBase64(response.data);\n      const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\n\n      // Display the QR code image\n      setQRCode(qrCodeSrc);\n      setError('');\n\n      // Start countdown timer for 3 minutes\n      startTimer();\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      setError('Failed to generate QR code. Please try again.');\n      setQRCode('');\n    }\n  };\n  const startTimer = () => {\n    const interval = setInterval(() => {\n      setTimer(prevTime => {\n        if (prevTime === 0) {\n          clearInterval(interval);\n          setQRCode('');\n          setFile(null);\n          return 180; // Reset timer to 3 minutes\n        } else {\n          return prevTime - 1;\n        }\n      });\n    }, 1000);\n  };\n  const convertBlobToBase64 = blob => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onerror = reject;\n      reader.onload = () => {\n        resolve(reader.result.split(',')[1]);\n      };\n      reader.readAsDataURL(blob);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qrcode-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"QR Code Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"qrcode-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Upload File:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileChange,\n          accept: \".pdf,.doc,.docx\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), qrCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"qrcode-generated\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated QR Code:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: qrCode,\n        alt: \"Generated QR Code\",\n        className: \"qr-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time remaining: \", timer, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(QRCodeGenerator, \"Ajgp/OT1q36EKoAxP+2V0sXy6hE=\");\n_c = QRCodeGenerator;\nexport default QRCodeGenerator;\nvar _c;\n$RefreshReg$(_c, \"QRCodeGenerator\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","QRCodeGenerator","_s","file","setFile","qrCode","setQRCode","error","setError","timer","setTimer","handleFileChange","event","target","files","handleSubmit","preventDefault","formData","FormData","append","response","post","headers","responseType","qrCodeBase64","convertBlobToBase64","data","qrCodeSrc","startTimer","console","interval","setInterval","prevTime","clearInterval","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","split","readAsDataURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","accept","required","src","alt","_c","$RefreshReg$"],"sources":["D:/Personal Projects/QR code/qr/src/components/Qr_g.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import './qr_g.css';\r\n\r\n// const QRCodeGenerator = () => {\r\n//   const [content, setContent] = useState(null); // Use null for file content\r\n//   const [qrCode, setQRCode] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [contentType, setContentType] = useState('text'); // Default content type\r\n\r\n//   const handleContentTypeChange = (event) => {\r\n//     setContentType(event.target.value);\r\n//     setContent(null); // Clear content when content type changes\r\n//     setQRCode(''); // Clear QR code when content type changes\r\n//   };\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     try {\r\n//       let formData = new FormData();\r\n//       formData.append('type', contentType);\r\n\r\n//       if (contentType === 'text') {\r\n//         formData.append('content', content);\r\n//       } else if (contentType === 'image' || contentType === 'file') {\r\n//         formData.append('content', content);\r\n//       }\r\n\r\n//       // Send POST request to Flask backend\r\n//       const response = await axios.post('http://localhost:5000/generate_qr', formData, {\r\n//         headers: {\r\n//           'Content-Type': 'multipart/form-data'\r\n//         },\r\n//         responseType: 'blob', // Ensure response is treated as a blob\r\n//       });\r\n\r\n//       // Convert blob to base64 string\r\n//       const qrCodeBase64 = await convertBlobToBase64(response.data);\r\n//       const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\r\n\r\n//       // Display the QR code image\r\n//       setQRCode(qrCodeSrc);\r\n//       setError('');\r\n//     } catch (error) {\r\n//       console.error('Error generating QR code:', error);\r\n//       setError('Failed to generate QR code. Please try again.');\r\n//       setQRCode(''); // Clear QR code on error\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     setContent(event.target.files[0]); // Update content with selected file\r\n//   };\r\n\r\n//   const convertBlobToBase64 = (blob) => {\r\n//     return new Promise((resolve, reject) => {\r\n//       const reader = new FileReader();\r\n//       reader.onerror = reject;\r\n//       reader.onload = () => {\r\n//         resolve(reader.result.split(',')[1]);\r\n//       };\r\n//       reader.readAsDataURL(blob);\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"qrcode-container\">\r\n//       <h2>QR Code Generator</h2>\r\n//       <form className=\"qrcode-form\" onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Select content type:\r\n//           <select value={contentType} onChange={handleContentTypeChange}>\r\n//             <option value=\"text\">Text</option>\r\n//             <option value=\"image\">Image URL</option>\r\n//             <option value=\"file\">Upload File</option>\r\n//           </select>\r\n//         </label>\r\n//         {contentType !== 'file' && (\r\n//           <label>\r\n//             Enter {contentType === 'text' ? 'Text' : 'URL'}:\r\n//             <input\r\n//               type=\"text\"\r\n//               value={content || ''}\r\n//               onChange={(e) => setContent(e.target.value)}\r\n//               required={contentType !== 'image'}\r\n//               placeholder={`Enter ${contentType === 'text' ? 'text' : 'URL'}`}\r\n//             />\r\n//           </label>\r\n//         )}\r\n//         {contentType === 'file' && (\r\n//           <label>\r\n//             Upload File:\r\n//             <input\r\n//               type=\"file\"\r\n//               onChange={handleFileChange}\r\n//               accept=\".jpg,.jpeg,.png,.gif,.txt,.pdf,.doc,.docx\"\r\n//               required\r\n//             />\r\n//           </label>\r\n//         )}\r\n//         <button type=\"submit\">Generate QR Code</button>\r\n//         {error && <p className=\"error-message\">{error}</p>}\r\n//       </form>\r\n//       {qrCode && (\r\n//         <div className=\"qrcode-generated\">\r\n//           <h3>Generated QR Code:</h3>\r\n//           <img src={qrCode} alt=\"Generated QR Code\" className=\"qr-image\" />\r\n//           <button className=\"share-button\" onClick={() => navigator.clipboard.writeText(qrCode)}>Share the QR code</button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default QRCodeGenerator;\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './qr_g.css';\r\n\r\nconst QRCodeGenerator = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [qrCode, setQRCode] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [timer, setTimer] = useState(180); // 3 minutes in seconds\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      if (!file) {\r\n        setError('Please select a file to upload.');\r\n        return;\r\n      }\r\n\r\n      let formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      // Send POST request to Flask backend\r\n      const response = await axios.post('http://localhost:5000/generate_qr', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        responseType: 'blob', // Ensure response is treated as a blob\r\n      });\r\n\r\n      // Convert blob to base64 string\r\n      const qrCodeBase64 = await convertBlobToBase64(response.data);\r\n      const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\r\n\r\n      // Display the QR code image\r\n      setQRCode(qrCodeSrc);\r\n      setError('');\r\n\r\n      // Start countdown timer for 3 minutes\r\n      startTimer();\r\n    } catch (error) {\r\n      console.error('Error generating QR code:', error);\r\n      setError('Failed to generate QR code. Please try again.');\r\n      setQRCode('');\r\n    }\r\n  };\r\n\r\n  const startTimer = () => {\r\n    const interval = setInterval(() => {\r\n      setTimer((prevTime) => {\r\n        if (prevTime === 0) {\r\n          clearInterval(interval);\r\n          setQRCode('');\r\n          setFile(null);\r\n          return 180; // Reset timer to 3 minutes\r\n        } else {\r\n          return prevTime - 1;\r\n        }\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  const convertBlobToBase64 = (blob) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onerror = reject;\r\n      reader.onload = () => {\r\n        resolve(reader.result.split(',')[1]);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"qrcode-container\">\r\n      <h2>QR Code Generator</h2>\r\n      <form className=\"qrcode-form\" onSubmit={handleSubmit}>\r\n        <label>\r\n          Upload File:\r\n          <input\r\n            type=\"file\"\r\n            onChange={handleFileChange}\r\n            accept=\".pdf,.doc,.docx\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Generate QR Code</button>\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </form>\r\n      {qrCode && (\r\n        <div className=\"qrcode-generated\">\r\n          <h3>Generated QR Code:</h3>\r\n          <img src={qrCode} alt=\"Generated QR Code\" className=\"qr-image\" />\r\n          <p>Time remaining: {timer} seconds</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRCodeGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}