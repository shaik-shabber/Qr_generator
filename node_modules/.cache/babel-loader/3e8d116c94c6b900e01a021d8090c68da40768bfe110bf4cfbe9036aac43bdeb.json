{"ast":null,"code":"var _jsxFileName = \"D:\\\\Personal Projects\\\\QR code\\\\qr\\\\src\\\\components\\\\Qr_g.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import \"./qr_g.css\";\n\n// const QRCodeGenerator = () => {\n//   const [url, setUrl] = useState('');\n//   const [qrCode, setQRCode] = useState('');\n//   const [error, setError] = useState('');\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       // Send POST request to Flask backend\n//       const response = await axios.post('http://localhost:5000/generate_qr', { url }, {\n//         responseType: 'blob',  // Ensure response is treated as a blob\n//       });\n\n//       // Convert blob to base64 string\n//       const qrCodeBase64 = await convertBlobToBase64(response.data);\n//       const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\n\n//       // Display the QR code image\n//       setQRCode(qrCodeSrc);\n//       setError('');\n//     } catch (error) {\n//       console.error('Error generating QR code:', error);\n//       setError('Failed to generate QR code. Please try again.');\n//     }\n//   };\n\n//   const convertBlobToBase64 = (blob) => {\n//     return new Promise((resolve, reject) => {\n//       const reader = new FileReader();\n//       reader.onerror = reject;\n//       reader.onload = () => {\n//         resolve(reader.result.split(',')[1]);\n//       };\n//       reader.readAsDataURL(blob);\n//     });\n//   };\n\n//   return (\n//     <div className=\"qrcode-container\">\n//       <h2>QR Code Generator</h2>\n//       <form className=\"qrcode-form\" onSubmit={handleSubmit}>\n//         <label>\n//           Enter URL:\n//           <input\n//             type=\"text\"\n//             value={url}\n//             onChange={(e) => setUrl(e.target.value)}\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\">Generate QR Code</button>\n//         {error && <p className=\"error-message\">{error}</p>}\n//       </form>\n//       {qrCode && (\n//         <div className=\"qrcode-generated\">\n//           <h3>Generated QR Code:</h3>\n//           <img src={qrCode} alt=\"Generated QR Code\" />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default QRCodeGenerator;\n\n// part2\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport \"./qr_g.css\";\nimport youtubeLogo from './youtube_logo.png';\nimport leetcodeLogo from './leetcode_logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRCodeGenerator = () => {\n  _s();\n  const [url, setUrl] = useState('');\n  const [qrCode, setQRCode] = useState('');\n  const [error, setError] = useState('');\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      // Send POST request to Flask backend\n      const response = await axios.post('http://localhost:5000/generate_qr', {\n        url\n      }, {\n        responseType: 'blob' // Ensure response is treated as a blob\n      });\n\n      // Convert blob to base64 string\n      const qrCodeBase64 = await convertBlobToBase64(response.data);\n      const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\n\n      // Display the QR code image\n      setQRCode(qrCodeSrc);\n      setError('');\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      setError('Failed to generate QR code. Please try again.');\n    }\n  };\n  const convertBlobToBase64 = blob => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onerror = reject;\n      reader.onload = () => {\n        resolve(reader.result.split(',')[1]);\n      };\n      reader.readAsDataURL(blob);\n    });\n  };\n  const getQRCodeStyle = () => {\n    if (url.includes('youtube.com')) {\n      return {\n        borderColor: '#FF0000',\n        // YouTube red color\n        backgroundImage: `url(${youtubeLogo})`\n      };\n    } else if (url.length === 10 && /^\\d+$/.test(url)) {\n      return {\n        borderColor: '#00FF00',\n        // Green for payment gateway\n        background: 'linear-gradient(45deg, #00FF00, #00FFFF)'\n      };\n    } else if (url.includes('leetcode.com')) {\n      return {\n        borderColor: '#FFA500',\n        // Orange for LeetCode\n        backgroundImage: `url(${leetcodeLogo})`\n      };\n    } else {\n      return {\n        borderColor: '#000000' // Default black color\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qrcode-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"QR Code Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"qrcode-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: url,\n          onChange: e => setUrl(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), qrCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"qrcode-generated\",\n      style: getQRCodeStyle(),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated QR Code:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: qrCode,\n        alt: \"Generated QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(QRCodeGenerator, \"dDP1oZ2l7dbXyZ6q7U8t/cTZUXw=\");\n_c = QRCodeGenerator;\nexport default QRCodeGenerator;\nvar _c;\n$RefreshReg$(_c, \"QRCodeGenerator\");","map":{"version":3,"names":["React","useState","axios","youtubeLogo","leetcodeLogo","jsxDEV","_jsxDEV","QRCodeGenerator","_s","url","setUrl","qrCode","setQRCode","error","setError","handleSubmit","event","preventDefault","response","post","responseType","qrCodeBase64","convertBlobToBase64","data","qrCodeSrc","console","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","split","readAsDataURL","getQRCodeStyle","includes","borderColor","backgroundImage","length","test","background","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","required","style","src","alt","_c","$RefreshReg$"],"sources":["D:/Personal Projects/QR code/qr/src/components/Qr_g.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import \"./qr_g.css\";\r\n\r\n// const QRCodeGenerator = () => {\r\n//   const [url, setUrl] = useState('');\r\n//   const [qrCode, setQRCode] = useState('');\r\n//   const [error, setError] = useState('');\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     try {\r\n//       // Send POST request to Flask backend\r\n//       const response = await axios.post('http://localhost:5000/generate_qr', { url }, {\r\n//         responseType: 'blob',  // Ensure response is treated as a blob\r\n//       });\r\n\r\n//       // Convert blob to base64 string\r\n//       const qrCodeBase64 = await convertBlobToBase64(response.data);\r\n//       const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\r\n\r\n//       // Display the QR code image\r\n//       setQRCode(qrCodeSrc);\r\n//       setError('');\r\n//     } catch (error) {\r\n//       console.error('Error generating QR code:', error);\r\n//       setError('Failed to generate QR code. Please try again.');\r\n//     }\r\n//   };\r\n\r\n//   const convertBlobToBase64 = (blob) => {\r\n//     return new Promise((resolve, reject) => {\r\n//       const reader = new FileReader();\r\n//       reader.onerror = reject;\r\n//       reader.onload = () => {\r\n//         resolve(reader.result.split(',')[1]);\r\n//       };\r\n//       reader.readAsDataURL(blob);\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"qrcode-container\">\r\n//       <h2>QR Code Generator</h2>\r\n//       <form className=\"qrcode-form\" onSubmit={handleSubmit}>\r\n//         <label>\r\n//           Enter URL:\r\n//           <input\r\n//             type=\"text\"\r\n//             value={url}\r\n//             onChange={(e) => setUrl(e.target.value)}\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\">Generate QR Code</button>\r\n//         {error && <p className=\"error-message\">{error}</p>}\r\n//       </form>\r\n//       {qrCode && (\r\n//         <div className=\"qrcode-generated\">\r\n//           <h3>Generated QR Code:</h3>\r\n//           <img src={qrCode} alt=\"Generated QR Code\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default QRCodeGenerator;\r\n\r\n\r\n\r\n// part2\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport \"./qr_g.css\";\r\nimport youtubeLogo from './youtube_logo.png';\r\nimport leetcodeLogo from './leetcode_logo.png';\r\n\r\nconst QRCodeGenerator = () => {\r\n  const [url, setUrl] = useState('');\r\n  const [qrCode, setQRCode] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      // Send POST request to Flask backend\r\n      const response = await axios.post('http://localhost:5000/generate_qr', { url }, {\r\n        responseType: 'blob',  // Ensure response is treated as a blob\r\n      });\r\n\r\n      // Convert blob to base64 string\r\n      const qrCodeBase64 = await convertBlobToBase64(response.data);\r\n      const qrCodeSrc = `data:image/png;base64,${qrCodeBase64}`;\r\n\r\n      // Display the QR code image\r\n      setQRCode(qrCodeSrc);\r\n      setError('');\r\n    } catch (error) {\r\n      console.error('Error generating QR code:', error);\r\n      setError('Failed to generate QR code. Please try again.');\r\n    }\r\n  };\r\n\r\n  const convertBlobToBase64 = (blob) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onerror = reject;\r\n      reader.onload = () => {\r\n        resolve(reader.result.split(',')[1]);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  };\r\n\r\n  const getQRCodeStyle = () => {\r\n    if (url.includes('youtube.com')) {\r\n      return {\r\n        borderColor: '#FF0000',  // YouTube red color\r\n        backgroundImage: `url(${youtubeLogo})`,\r\n      };\r\n    } else if (url.length === 10 && /^\\d+$/.test(url)) {\r\n      return {\r\n        borderColor: '#00FF00',  // Green for payment gateway\r\n        background: 'linear-gradient(45deg, #00FF00, #00FFFF)',\r\n      };\r\n    } else if (url.includes('leetcode.com')) {\r\n      return {\r\n        borderColor: '#FFA500',  // Orange for LeetCode\r\n        backgroundImage: `url(${leetcodeLogo})`,\r\n      };\r\n    } else {\r\n      return {\r\n        borderColor: '#000000',  // Default black color\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"qrcode-container\">\r\n      <h2>QR Code Generator</h2>\r\n      <form className=\"qrcode-form\" onSubmit={handleSubmit}>\r\n        <label>\r\n          Enter URL:\r\n          <input\r\n            type=\"text\"\r\n            value={url}\r\n            onChange={(e) => setUrl(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Generate QR Code</button>\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n      </form>\r\n      {qrCode && (\r\n        <div className=\"qrcode-generated\" style={getQRCodeStyle()}>\r\n          <h3>Generated QR Code:</h3>\r\n          <img src={qrCode} alt=\"Generated QR Code\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRCodeGenerator;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY;AACnB,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,YAAY,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMc,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,mCAAmC,EAAE;QAAEV;MAAI,CAAC,EAAE;QAC9EW,YAAY,EAAE,MAAM,CAAG;MACzB,CAAC,CAAC;;MAEF;MACA,MAAMC,YAAY,GAAG,MAAMC,mBAAmB,CAACJ,QAAQ,CAACK,IAAI,CAAC;MAC7D,MAAMC,SAAS,GAAG,yBAAyBH,YAAY,EAAE;;MAEzD;MACAT,SAAS,CAACY,SAAS,CAAC;MACpBV,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDC,QAAQ,CAAC,+CAA+C,CAAC;IAC3D;EACF,CAAC;EAED,MAAMQ,mBAAmB,GAAII,IAAI,IAAK;IACpC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,OAAO,GAAGH,MAAM;MACvBC,MAAM,CAACG,MAAM,GAAG,MAAM;QACpBL,OAAO,CAACE,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC,CAAC;MACDL,MAAM,CAACM,aAAa,CAACV,IAAI,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC;EAED,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI5B,GAAG,CAAC6B,QAAQ,CAAC,aAAa,CAAC,EAAE;MAC/B,OAAO;QACLC,WAAW,EAAE,SAAS;QAAG;QACzBC,eAAe,EAAE,OAAOrC,WAAW;MACrC,CAAC;IACH,CAAC,MAAM,IAAIM,GAAG,CAACgC,MAAM,KAAK,EAAE,IAAI,OAAO,CAACC,IAAI,CAACjC,GAAG,CAAC,EAAE;MACjD,OAAO;QACL8B,WAAW,EAAE,SAAS;QAAG;QACzBI,UAAU,EAAE;MACd,CAAC;IACH,CAAC,MAAM,IAAIlC,GAAG,CAAC6B,QAAQ,CAAC,cAAc,CAAC,EAAE;MACvC,OAAO;QACLC,WAAW,EAAE,SAAS;QAAG;QACzBC,eAAe,EAAE,OAAOpC,YAAY;MACtC,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLmC,WAAW,EAAE,SAAS,CAAG;MAC3B,CAAC;IACH;EACF,CAAC;EAED,oBACEjC,OAAA;IAAKsC,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BvC,OAAA;MAAAuC,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B3C,OAAA;MAAMsC,SAAS,EAAC,aAAa;MAACM,QAAQ,EAAEnC,YAAa;MAAA8B,QAAA,gBACnDvC,OAAA;QAAAuC,QAAA,GAAO,YAEL,eAAAvC,OAAA;UACE6C,IAAI,EAAC,MAAM;UACXC,KAAK,EAAE3C,GAAI;UACX4C,QAAQ,EAAGC,CAAC,IAAK5C,MAAM,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UACxCI,QAAQ;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACR3C,OAAA;QAAQ6C,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC9CpC,KAAK,iBAAIP,OAAA;QAAGsC,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEhC;MAAK;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EACNtC,MAAM,iBACLL,OAAA;MAAKsC,SAAS,EAAC,kBAAkB;MAACa,KAAK,EAAEpB,cAAc,CAAC,CAAE;MAAAQ,QAAA,gBACxDvC,OAAA;QAAAuC,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3B3C,OAAA;QAAKoD,GAAG,EAAE/C,MAAO;QAACgD,GAAG,EAAC;MAAmB;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACzC,EAAA,CArFID,eAAe;AAAAqD,EAAA,GAAfrD,eAAe;AAuFrB,eAAeA,eAAe;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}